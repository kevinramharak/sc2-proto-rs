// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `s2clientprotocol/data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:SC2APIProtocol.AbilityData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AbilityData {
    // message fields
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.ability_id)
    pub ability_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.link_name)
    pub link_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.link_index)
    pub link_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.button_name)
    pub button_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.friendly_name)
    pub friendly_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.hotkey)
    pub hotkey: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.remaps_to_ability_id)
    pub remaps_to_ability_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.available)
    pub available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.target)
    pub target: ::std::option::Option<::protobuf::EnumOrUnknown<ability_data::Target>>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.allow_minimap)
    pub allow_minimap: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.allow_autocast)
    pub allow_autocast: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.is_building)
    pub is_building: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.footprint_radius)
    pub footprint_radius: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.is_instant_placement)
    pub is_instant_placement: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.AbilityData.cast_range)
    pub cast_range: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:SC2APIProtocol.AbilityData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AbilityData {
    fn default() -> &'a AbilityData {
        <AbilityData as ::protobuf::Message>::default_instance()
    }
}

impl AbilityData {
    pub fn new() -> AbilityData {
        ::std::default::Default::default()
    }

    // optional uint32 ability_id = 1;

    pub fn ability_id(&self) -> u32 {
        self.ability_id.unwrap_or(0)
    }

    pub fn clear_ability_id(&mut self) {
        self.ability_id = ::std::option::Option::None;
    }

    pub fn has_ability_id(&self) -> bool {
        self.ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ability_id(&mut self, v: u32) {
        self.ability_id = ::std::option::Option::Some(v);
    }

    // optional string link_name = 2;

    pub fn link_name(&self) -> &str {
        match self.link_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_link_name(&mut self) {
        self.link_name = ::std::option::Option::None;
    }

    pub fn has_link_name(&self) -> bool {
        self.link_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_link_name(&mut self, v: ::std::string::String) {
        self.link_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link_name(&mut self) -> &mut ::std::string::String {
        if self.link_name.is_none() {
            self.link_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.link_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_link_name(&mut self) -> ::std::string::String {
        self.link_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 link_index = 3;

    pub fn link_index(&self) -> u32 {
        self.link_index.unwrap_or(0)
    }

    pub fn clear_link_index(&mut self) {
        self.link_index = ::std::option::Option::None;
    }

    pub fn has_link_index(&self) -> bool {
        self.link_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_link_index(&mut self, v: u32) {
        self.link_index = ::std::option::Option::Some(v);
    }

    // optional string button_name = 4;

    pub fn button_name(&self) -> &str {
        match self.button_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_button_name(&mut self) {
        self.button_name = ::std::option::Option::None;
    }

    pub fn has_button_name(&self) -> bool {
        self.button_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_button_name(&mut self, v: ::std::string::String) {
        self.button_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_button_name(&mut self) -> &mut ::std::string::String {
        if self.button_name.is_none() {
            self.button_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.button_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_button_name(&mut self) -> ::std::string::String {
        self.button_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string friendly_name = 5;

    pub fn friendly_name(&self) -> &str {
        match self.friendly_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_friendly_name(&mut self) {
        self.friendly_name = ::std::option::Option::None;
    }

    pub fn has_friendly_name(&self) -> bool {
        self.friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friendly_name(&mut self, v: ::std::string::String) {
        self.friendly_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.friendly_name.is_none() {
            self.friendly_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_friendly_name(&mut self) -> ::std::string::String {
        self.friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string hotkey = 6;

    pub fn hotkey(&self) -> &str {
        match self.hotkey.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hotkey(&mut self) {
        self.hotkey = ::std::option::Option::None;
    }

    pub fn has_hotkey(&self) -> bool {
        self.hotkey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hotkey(&mut self, v: ::std::string::String) {
        self.hotkey = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hotkey(&mut self) -> &mut ::std::string::String {
        if self.hotkey.is_none() {
            self.hotkey = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hotkey.as_mut().unwrap()
    }

    // Take field
    pub fn take_hotkey(&mut self) -> ::std::string::String {
        self.hotkey.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 remaps_to_ability_id = 7;

    pub fn remaps_to_ability_id(&self) -> u32 {
        self.remaps_to_ability_id.unwrap_or(0)
    }

    pub fn clear_remaps_to_ability_id(&mut self) {
        self.remaps_to_ability_id = ::std::option::Option::None;
    }

    pub fn has_remaps_to_ability_id(&self) -> bool {
        self.remaps_to_ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remaps_to_ability_id(&mut self, v: u32) {
        self.remaps_to_ability_id = ::std::option::Option::Some(v);
    }

    // optional bool available = 8;

    pub fn available(&self) -> bool {
        self.available.unwrap_or(false)
    }

    pub fn clear_available(&mut self) {
        self.available = ::std::option::Option::None;
    }

    pub fn has_available(&self) -> bool {
        self.available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: bool) {
        self.available = ::std::option::Option::Some(v);
    }

    // optional .SC2APIProtocol.AbilityData.Target target = 9;

    pub fn target(&self) -> ability_data::Target {
        match self.target {
            Some(e) => e.enum_value_or(ability_data::Target::None),
            None => ability_data::Target::None,
        }
    }

    pub fn clear_target(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ability_data::Target) {
        self.target = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool allow_minimap = 10;

    pub fn allow_minimap(&self) -> bool {
        self.allow_minimap.unwrap_or(false)
    }

    pub fn clear_allow_minimap(&mut self) {
        self.allow_minimap = ::std::option::Option::None;
    }

    pub fn has_allow_minimap(&self) -> bool {
        self.allow_minimap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_minimap(&mut self, v: bool) {
        self.allow_minimap = ::std::option::Option::Some(v);
    }

    // optional bool allow_autocast = 11;

    pub fn allow_autocast(&self) -> bool {
        self.allow_autocast.unwrap_or(false)
    }

    pub fn clear_allow_autocast(&mut self) {
        self.allow_autocast = ::std::option::Option::None;
    }

    pub fn has_allow_autocast(&self) -> bool {
        self.allow_autocast.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_autocast(&mut self, v: bool) {
        self.allow_autocast = ::std::option::Option::Some(v);
    }

    // optional bool is_building = 12;

    pub fn is_building(&self) -> bool {
        self.is_building.unwrap_or(false)
    }

    pub fn clear_is_building(&mut self) {
        self.is_building = ::std::option::Option::None;
    }

    pub fn has_is_building(&self) -> bool {
        self.is_building.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_building(&mut self, v: bool) {
        self.is_building = ::std::option::Option::Some(v);
    }

    // optional float footprint_radius = 13;

    pub fn footprint_radius(&self) -> f32 {
        self.footprint_radius.unwrap_or(0.)
    }

    pub fn clear_footprint_radius(&mut self) {
        self.footprint_radius = ::std::option::Option::None;
    }

    pub fn has_footprint_radius(&self) -> bool {
        self.footprint_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_footprint_radius(&mut self, v: f32) {
        self.footprint_radius = ::std::option::Option::Some(v);
    }

    // optional bool is_instant_placement = 14;

    pub fn is_instant_placement(&self) -> bool {
        self.is_instant_placement.unwrap_or(false)
    }

    pub fn clear_is_instant_placement(&mut self) {
        self.is_instant_placement = ::std::option::Option::None;
    }

    pub fn has_is_instant_placement(&self) -> bool {
        self.is_instant_placement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_instant_placement(&mut self, v: bool) {
        self.is_instant_placement = ::std::option::Option::Some(v);
    }

    // optional float cast_range = 15;

    pub fn cast_range(&self) -> f32 {
        self.cast_range.unwrap_or(0.)
    }

    pub fn clear_cast_range(&mut self) {
        self.cast_range = ::std::option::Option::None;
    }

    pub fn has_cast_range(&self) -> bool {
        self.cast_range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cast_range(&mut self, v: f32) {
        self.cast_range = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ability_id",
            |m: &AbilityData| { &m.ability_id },
            |m: &mut AbilityData| { &mut m.ability_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "link_name",
            |m: &AbilityData| { &m.link_name },
            |m: &mut AbilityData| { &mut m.link_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "link_index",
            |m: &AbilityData| { &m.link_index },
            |m: &mut AbilityData| { &mut m.link_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "button_name",
            |m: &AbilityData| { &m.button_name },
            |m: &mut AbilityData| { &mut m.button_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "friendly_name",
            |m: &AbilityData| { &m.friendly_name },
            |m: &mut AbilityData| { &mut m.friendly_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hotkey",
            |m: &AbilityData| { &m.hotkey },
            |m: &mut AbilityData| { &mut m.hotkey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "remaps_to_ability_id",
            |m: &AbilityData| { &m.remaps_to_ability_id },
            |m: &mut AbilityData| { &mut m.remaps_to_ability_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "available",
            |m: &AbilityData| { &m.available },
            |m: &mut AbilityData| { &mut m.available },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "target",
            |m: &AbilityData| { &m.target },
            |m: &mut AbilityData| { &mut m.target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allow_minimap",
            |m: &AbilityData| { &m.allow_minimap },
            |m: &mut AbilityData| { &mut m.allow_minimap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allow_autocast",
            |m: &AbilityData| { &m.allow_autocast },
            |m: &mut AbilityData| { &mut m.allow_autocast },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_building",
            |m: &AbilityData| { &m.is_building },
            |m: &mut AbilityData| { &mut m.is_building },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "footprint_radius",
            |m: &AbilityData| { &m.footprint_radius },
            |m: &mut AbilityData| { &mut m.footprint_radius },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_instant_placement",
            |m: &AbilityData| { &m.is_instant_placement },
            |m: &mut AbilityData| { &mut m.is_instant_placement },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cast_range",
            |m: &AbilityData| { &m.cast_range },
            |m: &mut AbilityData| { &mut m.cast_range },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbilityData>(
            "AbilityData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AbilityData {
    const NAME: &'static str = "AbilityData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ability_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.link_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.link_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.button_name = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.friendly_name = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.hotkey = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.remaps_to_ability_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.available = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.target = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                80 => {
                    self.allow_minimap = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.allow_autocast = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.is_building = ::std::option::Option::Some(is.read_bool()?);
                },
                109 => {
                    self.footprint_radius = ::std::option::Option::Some(is.read_float()?);
                },
                112 => {
                    self.is_instant_placement = ::std::option::Option::Some(is.read_bool()?);
                },
                125 => {
                    self.cast_range = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ability_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.link_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.link_index {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.button_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.friendly_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.hotkey.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.remaps_to_ability_id {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.target {
            my_size += ::protobuf::rt::int32_size(9, v.value());
        }
        if let Some(v) = self.allow_minimap {
            my_size += 1 + 1;
        }
        if let Some(v) = self.allow_autocast {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_building {
            my_size += 1 + 1;
        }
        if let Some(v) = self.footprint_radius {
            my_size += 1 + 4;
        }
        if let Some(v) = self.is_instant_placement {
            my_size += 1 + 1;
        }
        if let Some(v) = self.cast_range {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ability_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.link_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.link_index {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.button_name.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.friendly_name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.hotkey.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.remaps_to_ability_id {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.available {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.target {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.allow_minimap {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.allow_autocast {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.is_building {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.footprint_radius {
            os.write_float(13, v)?;
        }
        if let Some(v) = self.is_instant_placement {
            os.write_bool(14, v)?;
        }
        if let Some(v) = self.cast_range {
            os.write_float(15, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AbilityData {
        AbilityData::new()
    }

    fn clear(&mut self) {
        self.ability_id = ::std::option::Option::None;
        self.link_name = ::std::option::Option::None;
        self.link_index = ::std::option::Option::None;
        self.button_name = ::std::option::Option::None;
        self.friendly_name = ::std::option::Option::None;
        self.hotkey = ::std::option::Option::None;
        self.remaps_to_ability_id = ::std::option::Option::None;
        self.available = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.allow_minimap = ::std::option::Option::None;
        self.allow_autocast = ::std::option::Option::None;
        self.is_building = ::std::option::Option::None;
        self.footprint_radius = ::std::option::Option::None;
        self.is_instant_placement = ::std::option::Option::None;
        self.cast_range = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AbilityData {
        static instance: AbilityData = AbilityData {
            ability_id: ::std::option::Option::None,
            link_name: ::std::option::Option::None,
            link_index: ::std::option::Option::None,
            button_name: ::std::option::Option::None,
            friendly_name: ::std::option::Option::None,
            hotkey: ::std::option::Option::None,
            remaps_to_ability_id: ::std::option::Option::None,
            available: ::std::option::Option::None,
            target: ::std::option::Option::None,
            allow_minimap: ::std::option::Option::None,
            allow_autocast: ::std::option::Option::None,
            is_building: ::std::option::Option::None,
            footprint_radius: ::std::option::Option::None,
            is_instant_placement: ::std::option::Option::None,
            cast_range: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AbilityData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AbilityData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AbilityData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AbilityData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AbilityData`
pub mod ability_data {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:SC2APIProtocol.AbilityData.Target)
    pub enum Target {
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.AbilityData.Target.None)
        None = 1,
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.AbilityData.Target.Point)
        Point = 2,
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.AbilityData.Target.Unit)
        Unit = 3,
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.AbilityData.Target.PointOrUnit)
        PointOrUnit = 4,
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.AbilityData.Target.PointOrNone)
        PointOrNone = 5,
    }

    impl ::protobuf::Enum for Target {
        const NAME: &'static str = "Target";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Target> {
            match value {
                1 => ::std::option::Option::Some(Target::None),
                2 => ::std::option::Option::Some(Target::Point),
                3 => ::std::option::Option::Some(Target::Unit),
                4 => ::std::option::Option::Some(Target::PointOrUnit),
                5 => ::std::option::Option::Some(Target::PointOrNone),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Target> {
            match str {
                "None" => ::std::option::Option::Some(Target::None),
                "Point" => ::std::option::Option::Some(Target::Point),
                "Unit" => ::std::option::Option::Some(Target::Unit),
                "PointOrUnit" => ::std::option::Option::Some(Target::PointOrUnit),
                "PointOrNone" => ::std::option::Option::Some(Target::PointOrNone),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Target] = &[
            Target::None,
            Target::Point,
            Target::Unit,
            Target::PointOrUnit,
            Target::PointOrNone,
        ];
    }

    impl ::protobuf::EnumFull for Target {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("AbilityData.Target").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Target::None => 0,
                Target::Point => 1,
                Target::Unit => 2,
                Target::PointOrUnit => 3,
                Target::PointOrNone => 4,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Target {
        fn default() -> Self {
            Target::None
        }
    }

    impl Target {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Target>("AbilityData.Target")
        }
    }
}

// @@protoc_insertion_point(message:SC2APIProtocol.DamageBonus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DamageBonus {
    // message fields
    // @@protoc_insertion_point(field:SC2APIProtocol.DamageBonus.attribute)
    pub attribute: ::std::option::Option<::protobuf::EnumOrUnknown<Attribute>>,
    // @@protoc_insertion_point(field:SC2APIProtocol.DamageBonus.bonus)
    pub bonus: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:SC2APIProtocol.DamageBonus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DamageBonus {
    fn default() -> &'a DamageBonus {
        <DamageBonus as ::protobuf::Message>::default_instance()
    }
}

impl DamageBonus {
    pub fn new() -> DamageBonus {
        ::std::default::Default::default()
    }

    // optional .SC2APIProtocol.Attribute attribute = 1;

    pub fn attribute(&self) -> Attribute {
        match self.attribute {
            Some(e) => e.enum_value_or(Attribute::Light),
            None => Attribute::Light,
        }
    }

    pub fn clear_attribute(&mut self) {
        self.attribute = ::std::option::Option::None;
    }

    pub fn has_attribute(&self) -> bool {
        self.attribute.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attribute(&mut self, v: Attribute) {
        self.attribute = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional float bonus = 2;

    pub fn bonus(&self) -> f32 {
        self.bonus.unwrap_or(0.)
    }

    pub fn clear_bonus(&mut self) {
        self.bonus = ::std::option::Option::None;
    }

    pub fn has_bonus(&self) -> bool {
        self.bonus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bonus(&mut self, v: f32) {
        self.bonus = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attribute",
            |m: &DamageBonus| { &m.attribute },
            |m: &mut DamageBonus| { &mut m.attribute },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bonus",
            |m: &DamageBonus| { &m.bonus },
            |m: &mut DamageBonus| { &mut m.bonus },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DamageBonus>(
            "DamageBonus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DamageBonus {
    const NAME: &'static str = "DamageBonus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.attribute = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                21 => {
                    self.bonus = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.attribute {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.bonus {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.attribute {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.bonus {
            os.write_float(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DamageBonus {
        DamageBonus::new()
    }

    fn clear(&mut self) {
        self.attribute = ::std::option::Option::None;
        self.bonus = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DamageBonus {
        static instance: DamageBonus = DamageBonus {
            attribute: ::std::option::Option::None,
            bonus: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DamageBonus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DamageBonus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DamageBonus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DamageBonus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SC2APIProtocol.Weapon)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Weapon {
    // message fields
    // @@protoc_insertion_point(field:SC2APIProtocol.Weapon.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<weapon::TargetType>>,
    // @@protoc_insertion_point(field:SC2APIProtocol.Weapon.damage)
    pub damage: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.Weapon.damage_bonus)
    pub damage_bonus: ::std::vec::Vec<DamageBonus>,
    // @@protoc_insertion_point(field:SC2APIProtocol.Weapon.attacks)
    pub attacks: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.Weapon.range)
    pub range: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.Weapon.speed)
    pub speed: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:SC2APIProtocol.Weapon.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Weapon {
    fn default() -> &'a Weapon {
        <Weapon as ::protobuf::Message>::default_instance()
    }
}

impl Weapon {
    pub fn new() -> Weapon {
        ::std::default::Default::default()
    }

    // optional .SC2APIProtocol.Weapon.TargetType type = 1;

    pub fn type_(&self) -> weapon::TargetType {
        match self.type_ {
            Some(e) => e.enum_value_or(weapon::TargetType::Ground),
            None => weapon::TargetType::Ground,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: weapon::TargetType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional float damage = 2;

    pub fn damage(&self) -> f32 {
        self.damage.unwrap_or(0.)
    }

    pub fn clear_damage(&mut self) {
        self.damage = ::std::option::Option::None;
    }

    pub fn has_damage(&self) -> bool {
        self.damage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_damage(&mut self, v: f32) {
        self.damage = ::std::option::Option::Some(v);
    }

    // optional uint32 attacks = 4;

    pub fn attacks(&self) -> u32 {
        self.attacks.unwrap_or(0)
    }

    pub fn clear_attacks(&mut self) {
        self.attacks = ::std::option::Option::None;
    }

    pub fn has_attacks(&self) -> bool {
        self.attacks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attacks(&mut self, v: u32) {
        self.attacks = ::std::option::Option::Some(v);
    }

    // optional float range = 5;

    pub fn range(&self) -> f32 {
        self.range.unwrap_or(0.)
    }

    pub fn clear_range(&mut self) {
        self.range = ::std::option::Option::None;
    }

    pub fn has_range(&self) -> bool {
        self.range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: f32) {
        self.range = ::std::option::Option::Some(v);
    }

    // optional float speed = 6;

    pub fn speed(&self) -> f32 {
        self.speed.unwrap_or(0.)
    }

    pub fn clear_speed(&mut self) {
        self.speed = ::std::option::Option::None;
    }

    pub fn has_speed(&self) -> bool {
        self.speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f32) {
        self.speed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &Weapon| { &m.type_ },
            |m: &mut Weapon| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "damage",
            |m: &Weapon| { &m.damage },
            |m: &mut Weapon| { &mut m.damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "damage_bonus",
            |m: &Weapon| { &m.damage_bonus },
            |m: &mut Weapon| { &mut m.damage_bonus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attacks",
            |m: &Weapon| { &m.attacks },
            |m: &mut Weapon| { &mut m.attacks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "range",
            |m: &Weapon| { &m.range },
            |m: &mut Weapon| { &mut m.range },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "speed",
            |m: &Weapon| { &m.speed },
            |m: &mut Weapon| { &mut m.speed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Weapon>(
            "Weapon",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Weapon {
    const NAME: &'static str = "Weapon";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                21 => {
                    self.damage = ::std::option::Option::Some(is.read_float()?);
                },
                26 => {
                    self.damage_bonus.push(is.read_message()?);
                },
                32 => {
                    self.attacks = ::std::option::Option::Some(is.read_uint32()?);
                },
                45 => {
                    self.range = ::std::option::Option::Some(is.read_float()?);
                },
                53 => {
                    self.speed = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.damage {
            my_size += 1 + 4;
        }
        for value in &self.damage_bonus {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.attacks {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.range {
            my_size += 1 + 4;
        }
        if let Some(v) = self.speed {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.damage {
            os.write_float(2, v)?;
        }
        for v in &self.damage_bonus {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.attacks {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.range {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.speed {
            os.write_float(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Weapon {
        Weapon::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.damage = ::std::option::Option::None;
        self.damage_bonus.clear();
        self.attacks = ::std::option::Option::None;
        self.range = ::std::option::Option::None;
        self.speed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Weapon {
        static instance: Weapon = Weapon {
            type_: ::std::option::Option::None,
            damage: ::std::option::Option::None,
            damage_bonus: ::std::vec::Vec::new(),
            attacks: ::std::option::Option::None,
            range: ::std::option::Option::None,
            speed: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Weapon {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Weapon").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Weapon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Weapon {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Weapon`
pub mod weapon {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:SC2APIProtocol.Weapon.TargetType)
    pub enum TargetType {
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.Weapon.TargetType.Ground)
        Ground = 1,
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.Weapon.TargetType.Air)
        Air = 2,
        // @@protoc_insertion_point(enum_value:SC2APIProtocol.Weapon.TargetType.Any)
        Any = 3,
    }

    impl ::protobuf::Enum for TargetType {
        const NAME: &'static str = "TargetType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<TargetType> {
            match value {
                1 => ::std::option::Option::Some(TargetType::Ground),
                2 => ::std::option::Option::Some(TargetType::Air),
                3 => ::std::option::Option::Some(TargetType::Any),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<TargetType> {
            match str {
                "Ground" => ::std::option::Option::Some(TargetType::Ground),
                "Air" => ::std::option::Option::Some(TargetType::Air),
                "Any" => ::std::option::Option::Some(TargetType::Any),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [TargetType] = &[
            TargetType::Ground,
            TargetType::Air,
            TargetType::Any,
        ];
    }

    impl ::protobuf::EnumFull for TargetType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Weapon.TargetType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                TargetType::Ground => 0,
                TargetType::Air => 1,
                TargetType::Any => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for TargetType {
        fn default() -> Self {
            TargetType::Ground
        }
    }

    impl TargetType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TargetType>("Weapon.TargetType")
        }
    }
}

// @@protoc_insertion_point(message:SC2APIProtocol.UnitTypeData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnitTypeData {
    // message fields
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.unit_id)
    pub unit_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.available)
    pub available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.cargo_size)
    pub cargo_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.mineral_cost)
    pub mineral_cost: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.vespene_cost)
    pub vespene_cost: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.food_required)
    pub food_required: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.food_provided)
    pub food_provided: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.ability_id)
    pub ability_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.race)
    pub race: ::std::option::Option<::protobuf::EnumOrUnknown<super::common::Race>>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.build_time)
    pub build_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.has_vespene)
    pub has_vespene: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.has_minerals)
    pub has_minerals: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.sight_range)
    pub sight_range: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.tech_alias)
    pub tech_alias: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.unit_alias)
    pub unit_alias: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.tech_requirement)
    pub tech_requirement: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.require_attached)
    pub require_attached: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.attributes)
    pub attributes: ::std::vec::Vec<::protobuf::EnumOrUnknown<Attribute>>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.movement_speed)
    pub movement_speed: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.armor)
    pub armor: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UnitTypeData.weapons)
    pub weapons: ::std::vec::Vec<Weapon>,
    // special fields
    // @@protoc_insertion_point(special_field:SC2APIProtocol.UnitTypeData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnitTypeData {
    fn default() -> &'a UnitTypeData {
        <UnitTypeData as ::protobuf::Message>::default_instance()
    }
}

impl UnitTypeData {
    pub fn new() -> UnitTypeData {
        ::std::default::Default::default()
    }

    // optional uint32 unit_id = 1;

    pub fn unit_id(&self) -> u32 {
        self.unit_id.unwrap_or(0)
    }

    pub fn clear_unit_id(&mut self) {
        self.unit_id = ::std::option::Option::None;
    }

    pub fn has_unit_id(&self) -> bool {
        self.unit_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unit_id(&mut self, v: u32) {
        self.unit_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool available = 3;

    pub fn available(&self) -> bool {
        self.available.unwrap_or(false)
    }

    pub fn clear_available(&mut self) {
        self.available = ::std::option::Option::None;
    }

    pub fn has_available(&self) -> bool {
        self.available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: bool) {
        self.available = ::std::option::Option::Some(v);
    }

    // optional uint32 cargo_size = 4;

    pub fn cargo_size(&self) -> u32 {
        self.cargo_size.unwrap_or(0)
    }

    pub fn clear_cargo_size(&mut self) {
        self.cargo_size = ::std::option::Option::None;
    }

    pub fn has_cargo_size(&self) -> bool {
        self.cargo_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cargo_size(&mut self, v: u32) {
        self.cargo_size = ::std::option::Option::Some(v);
    }

    // optional uint32 mineral_cost = 12;

    pub fn mineral_cost(&self) -> u32 {
        self.mineral_cost.unwrap_or(0)
    }

    pub fn clear_mineral_cost(&mut self) {
        self.mineral_cost = ::std::option::Option::None;
    }

    pub fn has_mineral_cost(&self) -> bool {
        self.mineral_cost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mineral_cost(&mut self, v: u32) {
        self.mineral_cost = ::std::option::Option::Some(v);
    }

    // optional uint32 vespene_cost = 13;

    pub fn vespene_cost(&self) -> u32 {
        self.vespene_cost.unwrap_or(0)
    }

    pub fn clear_vespene_cost(&mut self) {
        self.vespene_cost = ::std::option::Option::None;
    }

    pub fn has_vespene_cost(&self) -> bool {
        self.vespene_cost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vespene_cost(&mut self, v: u32) {
        self.vespene_cost = ::std::option::Option::Some(v);
    }

    // optional float food_required = 14;

    pub fn food_required(&self) -> f32 {
        self.food_required.unwrap_or(0.)
    }

    pub fn clear_food_required(&mut self) {
        self.food_required = ::std::option::Option::None;
    }

    pub fn has_food_required(&self) -> bool {
        self.food_required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_food_required(&mut self, v: f32) {
        self.food_required = ::std::option::Option::Some(v);
    }

    // optional float food_provided = 18;

    pub fn food_provided(&self) -> f32 {
        self.food_provided.unwrap_or(0.)
    }

    pub fn clear_food_provided(&mut self) {
        self.food_provided = ::std::option::Option::None;
    }

    pub fn has_food_provided(&self) -> bool {
        self.food_provided.is_some()
    }

    // Param is passed by value, moved
    pub fn set_food_provided(&mut self, v: f32) {
        self.food_provided = ::std::option::Option::Some(v);
    }

    // optional uint32 ability_id = 15;

    pub fn ability_id(&self) -> u32 {
        self.ability_id.unwrap_or(0)
    }

    pub fn clear_ability_id(&mut self) {
        self.ability_id = ::std::option::Option::None;
    }

    pub fn has_ability_id(&self) -> bool {
        self.ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ability_id(&mut self, v: u32) {
        self.ability_id = ::std::option::Option::Some(v);
    }

    // optional .SC2APIProtocol.Race race = 16;

    pub fn race(&self) -> super::common::Race {
        match self.race {
            Some(e) => e.enum_value_or(super::common::Race::NoRace),
            None => super::common::Race::NoRace,
        }
    }

    pub fn clear_race(&mut self) {
        self.race = ::std::option::Option::None;
    }

    pub fn has_race(&self) -> bool {
        self.race.is_some()
    }

    // Param is passed by value, moved
    pub fn set_race(&mut self, v: super::common::Race) {
        self.race = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional float build_time = 17;

    pub fn build_time(&self) -> f32 {
        self.build_time.unwrap_or(0.)
    }

    pub fn clear_build_time(&mut self) {
        self.build_time = ::std::option::Option::None;
    }

    pub fn has_build_time(&self) -> bool {
        self.build_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_build_time(&mut self, v: f32) {
        self.build_time = ::std::option::Option::Some(v);
    }

    // optional bool has_vespene = 19;

    pub fn has_vespene(&self) -> bool {
        self.has_vespene.unwrap_or(false)
    }

    pub fn clear_has_vespene(&mut self) {
        self.has_vespene = ::std::option::Option::None;
    }

    pub fn has_has_vespene(&self) -> bool {
        self.has_vespene.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_vespene(&mut self, v: bool) {
        self.has_vespene = ::std::option::Option::Some(v);
    }

    // optional bool has_minerals = 20;

    pub fn has_minerals(&self) -> bool {
        self.has_minerals.unwrap_or(false)
    }

    pub fn clear_has_minerals(&mut self) {
        self.has_minerals = ::std::option::Option::None;
    }

    pub fn has_has_minerals(&self) -> bool {
        self.has_minerals.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_minerals(&mut self, v: bool) {
        self.has_minerals = ::std::option::Option::Some(v);
    }

    // optional float sight_range = 25;

    pub fn sight_range(&self) -> f32 {
        self.sight_range.unwrap_or(0.)
    }

    pub fn clear_sight_range(&mut self) {
        self.sight_range = ::std::option::Option::None;
    }

    pub fn has_sight_range(&self) -> bool {
        self.sight_range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sight_range(&mut self, v: f32) {
        self.sight_range = ::std::option::Option::Some(v);
    }

    // optional uint32 unit_alias = 22;

    pub fn unit_alias(&self) -> u32 {
        self.unit_alias.unwrap_or(0)
    }

    pub fn clear_unit_alias(&mut self) {
        self.unit_alias = ::std::option::Option::None;
    }

    pub fn has_unit_alias(&self) -> bool {
        self.unit_alias.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unit_alias(&mut self, v: u32) {
        self.unit_alias = ::std::option::Option::Some(v);
    }

    // optional uint32 tech_requirement = 23;

    pub fn tech_requirement(&self) -> u32 {
        self.tech_requirement.unwrap_or(0)
    }

    pub fn clear_tech_requirement(&mut self) {
        self.tech_requirement = ::std::option::Option::None;
    }

    pub fn has_tech_requirement(&self) -> bool {
        self.tech_requirement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tech_requirement(&mut self, v: u32) {
        self.tech_requirement = ::std::option::Option::Some(v);
    }

    // optional bool require_attached = 24;

    pub fn require_attached(&self) -> bool {
        self.require_attached.unwrap_or(false)
    }

    pub fn clear_require_attached(&mut self) {
        self.require_attached = ::std::option::Option::None;
    }

    pub fn has_require_attached(&self) -> bool {
        self.require_attached.is_some()
    }

    // Param is passed by value, moved
    pub fn set_require_attached(&mut self, v: bool) {
        self.require_attached = ::std::option::Option::Some(v);
    }

    // optional float movement_speed = 9;

    pub fn movement_speed(&self) -> f32 {
        self.movement_speed.unwrap_or(0.)
    }

    pub fn clear_movement_speed(&mut self) {
        self.movement_speed = ::std::option::Option::None;
    }

    pub fn has_movement_speed(&self) -> bool {
        self.movement_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movement_speed(&mut self, v: f32) {
        self.movement_speed = ::std::option::Option::Some(v);
    }

    // optional float armor = 10;

    pub fn armor(&self) -> f32 {
        self.armor.unwrap_or(0.)
    }

    pub fn clear_armor(&mut self) {
        self.armor = ::std::option::Option::None;
    }

    pub fn has_armor(&self) -> bool {
        self.armor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_armor(&mut self, v: f32) {
        self.armor = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(22);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "unit_id",
            |m: &UnitTypeData| { &m.unit_id },
            |m: &mut UnitTypeData| { &mut m.unit_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &UnitTypeData| { &m.name },
            |m: &mut UnitTypeData| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "available",
            |m: &UnitTypeData| { &m.available },
            |m: &mut UnitTypeData| { &mut m.available },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cargo_size",
            |m: &UnitTypeData| { &m.cargo_size },
            |m: &mut UnitTypeData| { &mut m.cargo_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mineral_cost",
            |m: &UnitTypeData| { &m.mineral_cost },
            |m: &mut UnitTypeData| { &mut m.mineral_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "vespene_cost",
            |m: &UnitTypeData| { &m.vespene_cost },
            |m: &mut UnitTypeData| { &mut m.vespene_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "food_required",
            |m: &UnitTypeData| { &m.food_required },
            |m: &mut UnitTypeData| { &mut m.food_required },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "food_provided",
            |m: &UnitTypeData| { &m.food_provided },
            |m: &mut UnitTypeData| { &mut m.food_provided },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ability_id",
            |m: &UnitTypeData| { &m.ability_id },
            |m: &mut UnitTypeData| { &mut m.ability_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "race",
            |m: &UnitTypeData| { &m.race },
            |m: &mut UnitTypeData| { &mut m.race },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "build_time",
            |m: &UnitTypeData| { &m.build_time },
            |m: &mut UnitTypeData| { &mut m.build_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_vespene",
            |m: &UnitTypeData| { &m.has_vespene },
            |m: &mut UnitTypeData| { &mut m.has_vespene },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_minerals",
            |m: &UnitTypeData| { &m.has_minerals },
            |m: &mut UnitTypeData| { &mut m.has_minerals },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sight_range",
            |m: &UnitTypeData| { &m.sight_range },
            |m: &mut UnitTypeData| { &mut m.sight_range },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tech_alias",
            |m: &UnitTypeData| { &m.tech_alias },
            |m: &mut UnitTypeData| { &mut m.tech_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "unit_alias",
            |m: &UnitTypeData| { &m.unit_alias },
            |m: &mut UnitTypeData| { &mut m.unit_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tech_requirement",
            |m: &UnitTypeData| { &m.tech_requirement },
            |m: &mut UnitTypeData| { &mut m.tech_requirement },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "require_attached",
            |m: &UnitTypeData| { &m.require_attached },
            |m: &mut UnitTypeData| { &mut m.require_attached },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &UnitTypeData| { &m.attributes },
            |m: &mut UnitTypeData| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "movement_speed",
            |m: &UnitTypeData| { &m.movement_speed },
            |m: &mut UnitTypeData| { &mut m.movement_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "armor",
            |m: &UnitTypeData| { &m.armor },
            |m: &mut UnitTypeData| { &mut m.armor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "weapons",
            |m: &UnitTypeData| { &m.weapons },
            |m: &mut UnitTypeData| { &mut m.weapons },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnitTypeData>(
            "UnitTypeData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnitTypeData {
    const NAME: &'static str = "UnitTypeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.unit_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.available = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.cargo_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.mineral_cost = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.vespene_cost = ::std::option::Option::Some(is.read_uint32()?);
                },
                117 => {
                    self.food_required = ::std::option::Option::Some(is.read_float()?);
                },
                149 => {
                    self.food_provided = ::std::option::Option::Some(is.read_float()?);
                },
                120 => {
                    self.ability_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                128 => {
                    self.race = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                141 => {
                    self.build_time = ::std::option::Option::Some(is.read_float()?);
                },
                152 => {
                    self.has_vespene = ::std::option::Option::Some(is.read_bool()?);
                },
                160 => {
                    self.has_minerals = ::std::option::Option::Some(is.read_bool()?);
                },
                205 => {
                    self.sight_range = ::std::option::Option::Some(is.read_float()?);
                },
                170 => {
                    is.read_repeated_packed_uint32_into(&mut self.tech_alias)?;
                },
                168 => {
                    self.tech_alias.push(is.read_uint32()?);
                },
                176 => {
                    self.unit_alias = ::std::option::Option::Some(is.read_uint32()?);
                },
                184 => {
                    self.tech_requirement = ::std::option::Option::Some(is.read_uint32()?);
                },
                192 => {
                    self.require_attached = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.attributes.push(is.read_enum_or_unknown()?);
                },
                66 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.attributes)?
                },
                77 => {
                    self.movement_speed = ::std::option::Option::Some(is.read_float()?);
                },
                85 => {
                    self.armor = ::std::option::Option::Some(is.read_float()?);
                },
                90 => {
                    self.weapons.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.unit_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.cargo_size {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.mineral_cost {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.vespene_cost {
            my_size += ::protobuf::rt::uint32_size(13, v);
        }
        if let Some(v) = self.food_required {
            my_size += 1 + 4;
        }
        if let Some(v) = self.food_provided {
            my_size += 2 + 4;
        }
        if let Some(v) = self.ability_id {
            my_size += ::protobuf::rt::uint32_size(15, v);
        }
        if let Some(v) = self.race {
            my_size += ::protobuf::rt::int32_size(16, v.value());
        }
        if let Some(v) = self.build_time {
            my_size += 2 + 4;
        }
        if let Some(v) = self.has_vespene {
            my_size += 2 + 1;
        }
        if let Some(v) = self.has_minerals {
            my_size += 2 + 1;
        }
        if let Some(v) = self.sight_range {
            my_size += 2 + 4;
        }
        for value in &self.tech_alias {
            my_size += ::protobuf::rt::uint32_size(21, *value);
        };
        if let Some(v) = self.unit_alias {
            my_size += ::protobuf::rt::uint32_size(22, v);
        }
        if let Some(v) = self.tech_requirement {
            my_size += ::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.require_attached {
            my_size += 2 + 1;
        }
        for value in &self.attributes {
            my_size += ::protobuf::rt::int32_size(8, value.value());
        };
        if let Some(v) = self.movement_speed {
            my_size += 1 + 4;
        }
        if let Some(v) = self.armor {
            my_size += 1 + 4;
        }
        for value in &self.weapons {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.unit_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.available {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.cargo_size {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.mineral_cost {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.vespene_cost {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.food_required {
            os.write_float(14, v)?;
        }
        if let Some(v) = self.food_provided {
            os.write_float(18, v)?;
        }
        if let Some(v) = self.ability_id {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.race {
            os.write_enum(16, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.build_time {
            os.write_float(17, v)?;
        }
        if let Some(v) = self.has_vespene {
            os.write_bool(19, v)?;
        }
        if let Some(v) = self.has_minerals {
            os.write_bool(20, v)?;
        }
        if let Some(v) = self.sight_range {
            os.write_float(25, v)?;
        }
        for v in &self.tech_alias {
            os.write_uint32(21, *v)?;
        };
        if let Some(v) = self.unit_alias {
            os.write_uint32(22, v)?;
        }
        if let Some(v) = self.tech_requirement {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.require_attached {
            os.write_bool(24, v)?;
        }
        for v in &self.attributes {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(v))?;
        };
        if let Some(v) = self.movement_speed {
            os.write_float(9, v)?;
        }
        if let Some(v) = self.armor {
            os.write_float(10, v)?;
        }
        for v in &self.weapons {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnitTypeData {
        UnitTypeData::new()
    }

    fn clear(&mut self) {
        self.unit_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.available = ::std::option::Option::None;
        self.cargo_size = ::std::option::Option::None;
        self.mineral_cost = ::std::option::Option::None;
        self.vespene_cost = ::std::option::Option::None;
        self.food_required = ::std::option::Option::None;
        self.food_provided = ::std::option::Option::None;
        self.ability_id = ::std::option::Option::None;
        self.race = ::std::option::Option::None;
        self.build_time = ::std::option::Option::None;
        self.has_vespene = ::std::option::Option::None;
        self.has_minerals = ::std::option::Option::None;
        self.sight_range = ::std::option::Option::None;
        self.tech_alias.clear();
        self.unit_alias = ::std::option::Option::None;
        self.tech_requirement = ::std::option::Option::None;
        self.require_attached = ::std::option::Option::None;
        self.attributes.clear();
        self.movement_speed = ::std::option::Option::None;
        self.armor = ::std::option::Option::None;
        self.weapons.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnitTypeData {
        static instance: UnitTypeData = UnitTypeData {
            unit_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            available: ::std::option::Option::None,
            cargo_size: ::std::option::Option::None,
            mineral_cost: ::std::option::Option::None,
            vespene_cost: ::std::option::Option::None,
            food_required: ::std::option::Option::None,
            food_provided: ::std::option::Option::None,
            ability_id: ::std::option::Option::None,
            race: ::std::option::Option::None,
            build_time: ::std::option::Option::None,
            has_vespene: ::std::option::Option::None,
            has_minerals: ::std::option::Option::None,
            sight_range: ::std::option::Option::None,
            tech_alias: ::std::vec::Vec::new(),
            unit_alias: ::std::option::Option::None,
            tech_requirement: ::std::option::Option::None,
            require_attached: ::std::option::Option::None,
            attributes: ::std::vec::Vec::new(),
            movement_speed: ::std::option::Option::None,
            armor: ::std::option::Option::None,
            weapons: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnitTypeData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnitTypeData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnitTypeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnitTypeData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SC2APIProtocol.UpgradeData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpgradeData {
    // message fields
    // @@protoc_insertion_point(field:SC2APIProtocol.UpgradeData.upgrade_id)
    pub upgrade_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UpgradeData.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UpgradeData.mineral_cost)
    pub mineral_cost: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UpgradeData.vespene_cost)
    pub vespene_cost: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UpgradeData.research_time)
    pub research_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.UpgradeData.ability_id)
    pub ability_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:SC2APIProtocol.UpgradeData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpgradeData {
    fn default() -> &'a UpgradeData {
        <UpgradeData as ::protobuf::Message>::default_instance()
    }
}

impl UpgradeData {
    pub fn new() -> UpgradeData {
        ::std::default::Default::default()
    }

    // optional uint32 upgrade_id = 1;

    pub fn upgrade_id(&self) -> u32 {
        self.upgrade_id.unwrap_or(0)
    }

    pub fn clear_upgrade_id(&mut self) {
        self.upgrade_id = ::std::option::Option::None;
    }

    pub fn has_upgrade_id(&self) -> bool {
        self.upgrade_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upgrade_id(&mut self, v: u32) {
        self.upgrade_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 mineral_cost = 3;

    pub fn mineral_cost(&self) -> u32 {
        self.mineral_cost.unwrap_or(0)
    }

    pub fn clear_mineral_cost(&mut self) {
        self.mineral_cost = ::std::option::Option::None;
    }

    pub fn has_mineral_cost(&self) -> bool {
        self.mineral_cost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mineral_cost(&mut self, v: u32) {
        self.mineral_cost = ::std::option::Option::Some(v);
    }

    // optional uint32 vespene_cost = 4;

    pub fn vespene_cost(&self) -> u32 {
        self.vespene_cost.unwrap_or(0)
    }

    pub fn clear_vespene_cost(&mut self) {
        self.vespene_cost = ::std::option::Option::None;
    }

    pub fn has_vespene_cost(&self) -> bool {
        self.vespene_cost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vespene_cost(&mut self, v: u32) {
        self.vespene_cost = ::std::option::Option::Some(v);
    }

    // optional float research_time = 5;

    pub fn research_time(&self) -> f32 {
        self.research_time.unwrap_or(0.)
    }

    pub fn clear_research_time(&mut self) {
        self.research_time = ::std::option::Option::None;
    }

    pub fn has_research_time(&self) -> bool {
        self.research_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_research_time(&mut self, v: f32) {
        self.research_time = ::std::option::Option::Some(v);
    }

    // optional uint32 ability_id = 6;

    pub fn ability_id(&self) -> u32 {
        self.ability_id.unwrap_or(0)
    }

    pub fn clear_ability_id(&mut self) {
        self.ability_id = ::std::option::Option::None;
    }

    pub fn has_ability_id(&self) -> bool {
        self.ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ability_id(&mut self, v: u32) {
        self.ability_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upgrade_id",
            |m: &UpgradeData| { &m.upgrade_id },
            |m: &mut UpgradeData| { &mut m.upgrade_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &UpgradeData| { &m.name },
            |m: &mut UpgradeData| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mineral_cost",
            |m: &UpgradeData| { &m.mineral_cost },
            |m: &mut UpgradeData| { &mut m.mineral_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "vespene_cost",
            |m: &UpgradeData| { &m.vespene_cost },
            |m: &mut UpgradeData| { &mut m.vespene_cost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "research_time",
            |m: &UpgradeData| { &m.research_time },
            |m: &mut UpgradeData| { &mut m.research_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ability_id",
            |m: &UpgradeData| { &m.ability_id },
            |m: &mut UpgradeData| { &mut m.ability_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpgradeData>(
            "UpgradeData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpgradeData {
    const NAME: &'static str = "UpgradeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upgrade_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.mineral_cost = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.vespene_cost = ::std::option::Option::Some(is.read_uint32()?);
                },
                45 => {
                    self.research_time = ::std::option::Option::Some(is.read_float()?);
                },
                48 => {
                    self.ability_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upgrade_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.mineral_cost {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.vespene_cost {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.research_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.ability_id {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upgrade_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.mineral_cost {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.vespene_cost {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.research_time {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.ability_id {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpgradeData {
        UpgradeData::new()
    }

    fn clear(&mut self) {
        self.upgrade_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.mineral_cost = ::std::option::Option::None;
        self.vespene_cost = ::std::option::Option::None;
        self.research_time = ::std::option::Option::None;
        self.ability_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpgradeData {
        static instance: UpgradeData = UpgradeData {
            upgrade_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            mineral_cost: ::std::option::Option::None,
            vespene_cost: ::std::option::Option::None,
            research_time: ::std::option::Option::None,
            ability_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpgradeData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpgradeData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpgradeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpgradeData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SC2APIProtocol.BuffData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BuffData {
    // message fields
    // @@protoc_insertion_point(field:SC2APIProtocol.BuffData.buff_id)
    pub buff_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.BuffData.name)
    pub name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:SC2APIProtocol.BuffData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BuffData {
    fn default() -> &'a BuffData {
        <BuffData as ::protobuf::Message>::default_instance()
    }
}

impl BuffData {
    pub fn new() -> BuffData {
        ::std::default::Default::default()
    }

    // optional uint32 buff_id = 1;

    pub fn buff_id(&self) -> u32 {
        self.buff_id.unwrap_or(0)
    }

    pub fn clear_buff_id(&mut self) {
        self.buff_id = ::std::option::Option::None;
    }

    pub fn has_buff_id(&self) -> bool {
        self.buff_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buff_id(&mut self, v: u32) {
        self.buff_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "buff_id",
            |m: &BuffData| { &m.buff_id },
            |m: &mut BuffData| { &mut m.buff_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &BuffData| { &m.name },
            |m: &mut BuffData| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BuffData>(
            "BuffData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BuffData {
    const NAME: &'static str = "BuffData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.buff_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.buff_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.buff_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BuffData {
        BuffData::new()
    }

    fn clear(&mut self) {
        self.buff_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BuffData {
        static instance: BuffData = BuffData {
            buff_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BuffData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BuffData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BuffData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuffData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SC2APIProtocol.EffectData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EffectData {
    // message fields
    // @@protoc_insertion_point(field:SC2APIProtocol.EffectData.effect_id)
    pub effect_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SC2APIProtocol.EffectData.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.EffectData.friendly_name)
    pub friendly_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SC2APIProtocol.EffectData.radius)
    pub radius: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:SC2APIProtocol.EffectData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EffectData {
    fn default() -> &'a EffectData {
        <EffectData as ::protobuf::Message>::default_instance()
    }
}

impl EffectData {
    pub fn new() -> EffectData {
        ::std::default::Default::default()
    }

    // optional uint32 effect_id = 1;

    pub fn effect_id(&self) -> u32 {
        self.effect_id.unwrap_or(0)
    }

    pub fn clear_effect_id(&mut self) {
        self.effect_id = ::std::option::Option::None;
    }

    pub fn has_effect_id(&self) -> bool {
        self.effect_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effect_id(&mut self, v: u32) {
        self.effect_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string friendly_name = 3;

    pub fn friendly_name(&self) -> &str {
        match self.friendly_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_friendly_name(&mut self) {
        self.friendly_name = ::std::option::Option::None;
    }

    pub fn has_friendly_name(&self) -> bool {
        self.friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friendly_name(&mut self, v: ::std::string::String) {
        self.friendly_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.friendly_name.is_none() {
            self.friendly_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_friendly_name(&mut self) -> ::std::string::String {
        self.friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional float radius = 4;

    pub fn radius(&self) -> f32 {
        self.radius.unwrap_or(0.)
    }

    pub fn clear_radius(&mut self) {
        self.radius = ::std::option::Option::None;
    }

    pub fn has_radius(&self) -> bool {
        self.radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius(&mut self, v: f32) {
        self.radius = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "effect_id",
            |m: &EffectData| { &m.effect_id },
            |m: &mut EffectData| { &mut m.effect_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &EffectData| { &m.name },
            |m: &mut EffectData| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "friendly_name",
            |m: &EffectData| { &m.friendly_name },
            |m: &mut EffectData| { &mut m.friendly_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "radius",
            |m: &EffectData| { &m.radius },
            |m: &mut EffectData| { &mut m.radius },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EffectData>(
            "EffectData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EffectData {
    const NAME: &'static str = "EffectData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.effect_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.friendly_name = ::std::option::Option::Some(is.read_string()?);
                },
                37 => {
                    self.radius = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.effect_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.friendly_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.radius {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.effect_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.friendly_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.radius {
            os.write_float(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EffectData {
        EffectData::new()
    }

    fn clear(&mut self) {
        self.effect_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.friendly_name = ::std::option::Option::None;
        self.radius = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EffectData {
        static instance: EffectData = EffectData {
            effect_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            friendly_name: ::std::option::Option::None,
            radius: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EffectData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EffectData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EffectData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EffectData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:SC2APIProtocol.Attribute)
pub enum Attribute {
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Light)
    Light = 1,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Armored)
    Armored = 2,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Biological)
    Biological = 3,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Mechanical)
    Mechanical = 4,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Robotic)
    Robotic = 5,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Psionic)
    Psionic = 6,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Massive)
    Massive = 7,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Structure)
    Structure = 8,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Hover)
    Hover = 9,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Heroic)
    Heroic = 10,
    // @@protoc_insertion_point(enum_value:SC2APIProtocol.Attribute.Summoned)
    Summoned = 11,
}

impl ::protobuf::Enum for Attribute {
    const NAME: &'static str = "Attribute";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Attribute> {
        match value {
            1 => ::std::option::Option::Some(Attribute::Light),
            2 => ::std::option::Option::Some(Attribute::Armored),
            3 => ::std::option::Option::Some(Attribute::Biological),
            4 => ::std::option::Option::Some(Attribute::Mechanical),
            5 => ::std::option::Option::Some(Attribute::Robotic),
            6 => ::std::option::Option::Some(Attribute::Psionic),
            7 => ::std::option::Option::Some(Attribute::Massive),
            8 => ::std::option::Option::Some(Attribute::Structure),
            9 => ::std::option::Option::Some(Attribute::Hover),
            10 => ::std::option::Option::Some(Attribute::Heroic),
            11 => ::std::option::Option::Some(Attribute::Summoned),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Attribute> {
        match str {
            "Light" => ::std::option::Option::Some(Attribute::Light),
            "Armored" => ::std::option::Option::Some(Attribute::Armored),
            "Biological" => ::std::option::Option::Some(Attribute::Biological),
            "Mechanical" => ::std::option::Option::Some(Attribute::Mechanical),
            "Robotic" => ::std::option::Option::Some(Attribute::Robotic),
            "Psionic" => ::std::option::Option::Some(Attribute::Psionic),
            "Massive" => ::std::option::Option::Some(Attribute::Massive),
            "Structure" => ::std::option::Option::Some(Attribute::Structure),
            "Hover" => ::std::option::Option::Some(Attribute::Hover),
            "Heroic" => ::std::option::Option::Some(Attribute::Heroic),
            "Summoned" => ::std::option::Option::Some(Attribute::Summoned),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Attribute] = &[
        Attribute::Light,
        Attribute::Armored,
        Attribute::Biological,
        Attribute::Mechanical,
        Attribute::Robotic,
        Attribute::Psionic,
        Attribute::Massive,
        Attribute::Structure,
        Attribute::Hover,
        Attribute::Heroic,
        Attribute::Summoned,
    ];
}

impl ::protobuf::EnumFull for Attribute {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Attribute").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            Attribute::Light => 0,
            Attribute::Armored => 1,
            Attribute::Biological => 2,
            Attribute::Mechanical => 3,
            Attribute::Robotic => 4,
            Attribute::Psionic => 5,
            Attribute::Massive => 6,
            Attribute::Structure => 7,
            Attribute::Hover => 8,
            Attribute::Heroic => 9,
            Attribute::Summoned => 10,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for Attribute {
    fn default() -> Self {
        Attribute::Light
    }
}

impl Attribute {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Attribute>("Attribute")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bs2clientprotocol/data.proto\x12\x0eSC2APIProtocol\x1a\x1ds2clientp\
    rotocol/common.proto\"\x85\x05\n\x0bAbilityData\x12\x1d\n\nability_id\
    \x18\x01\x20\x01(\rR\tabilityId\x12\x1b\n\tlink_name\x18\x02\x20\x01(\tR\
    \x08linkName\x12\x1d\n\nlink_index\x18\x03\x20\x01(\rR\tlinkIndex\x12\
    \x1f\n\x0bbutton_name\x18\x04\x20\x01(\tR\nbuttonName\x12#\n\rfriendly_n\
    ame\x18\x05\x20\x01(\tR\x0cfriendlyName\x12\x16\n\x06hotkey\x18\x06\x20\
    \x01(\tR\x06hotkey\x12/\n\x14remaps_to_ability_id\x18\x07\x20\x01(\rR\
    \x11remapsToAbilityId\x12\x1c\n\tavailable\x18\x08\x20\x01(\x08R\tavaila\
    ble\x12:\n\x06target\x18\t\x20\x01(\x0e2\".SC2APIProtocol.AbilityData.Ta\
    rgetR\x06target\x12#\n\rallow_minimap\x18\n\x20\x01(\x08R\x0callowMinima\
    p\x12%\n\x0eallow_autocast\x18\x0b\x20\x01(\x08R\rallowAutocast\x12\x1f\
    \n\x0bis_building\x18\x0c\x20\x01(\x08R\nisBuilding\x12)\n\x10footprint_\
    radius\x18\r\x20\x01(\x02R\x0ffootprintRadius\x120\n\x14is_instant_place\
    ment\x18\x0e\x20\x01(\x08R\x12isInstantPlacement\x12\x1d\n\ncast_range\
    \x18\x0f\x20\x01(\x02R\tcastRange\"I\n\x06Target\x12\x08\n\x04None\x10\
    \x01\x12\t\n\x05Point\x10\x02\x12\x08\n\x04Unit\x10\x03\x12\x0f\n\x0bPoi\
    ntOrUnit\x10\x04\x12\x0f\n\x0bPointOrNone\x10\x05\"\\\n\x0bDamageBonus\
    \x127\n\tattribute\x18\x01\x20\x01(\x0e2\x19.SC2APIProtocol.AttributeR\t\
    attribute\x12\x14\n\x05bonus\x18\x02\x20\x01(\x02R\x05bonus\"\x89\x02\n\
    \x06Weapon\x125\n\x04type\x18\x01\x20\x01(\x0e2!.SC2APIProtocol.Weapon.T\
    argetTypeR\x04type\x12\x16\n\x06damage\x18\x02\x20\x01(\x02R\x06damage\
    \x12>\n\x0cdamage_bonus\x18\x03\x20\x03(\x0b2\x1b.SC2APIProtocol.DamageB\
    onusR\x0bdamageBonus\x12\x18\n\x07attacks\x18\x04\x20\x01(\rR\x07attacks\
    \x12\x14\n\x05range\x18\x05\x20\x01(\x02R\x05range\x12\x14\n\x05speed\
    \x18\x06\x20\x01(\x02R\x05speed\"*\n\nTargetType\x12\n\n\x06Ground\x10\
    \x01\x12\x07\n\x03Air\x10\x02\x12\x07\n\x03Any\x10\x03\"\x93\x06\n\x0cUn\
    itTypeData\x12\x17\n\x07unit_id\x18\x01\x20\x01(\rR\x06unitId\x12\x12\n\
    \x04name\x18\x02\x20\x01(\tR\x04name\x12\x1c\n\tavailable\x18\x03\x20\
    \x01(\x08R\tavailable\x12\x1d\n\ncargo_size\x18\x04\x20\x01(\rR\tcargoSi\
    ze\x12!\n\x0cmineral_cost\x18\x0c\x20\x01(\rR\x0bmineralCost\x12!\n\x0cv\
    espene_cost\x18\r\x20\x01(\rR\x0bvespeneCost\x12#\n\rfood_required\x18\
    \x0e\x20\x01(\x02R\x0cfoodRequired\x12#\n\rfood_provided\x18\x12\x20\x01\
    (\x02R\x0cfoodProvided\x12\x1d\n\nability_id\x18\x0f\x20\x01(\rR\tabilit\
    yId\x12(\n\x04race\x18\x10\x20\x01(\x0e2\x14.SC2APIProtocol.RaceR\x04rac\
    e\x12\x1d\n\nbuild_time\x18\x11\x20\x01(\x02R\tbuildTime\x12\x1f\n\x0bha\
    s_vespene\x18\x13\x20\x01(\x08R\nhasVespene\x12!\n\x0chas_minerals\x18\
    \x14\x20\x01(\x08R\x0bhasMinerals\x12\x1f\n\x0bsight_range\x18\x19\x20\
    \x01(\x02R\nsightRange\x12\x1d\n\ntech_alias\x18\x15\x20\x03(\rR\ttechAl\
    ias\x12\x1d\n\nunit_alias\x18\x16\x20\x01(\rR\tunitAlias\x12)\n\x10tech_\
    requirement\x18\x17\x20\x01(\rR\x0ftechRequirement\x12)\n\x10require_att\
    ached\x18\x18\x20\x01(\x08R\x0frequireAttached\x129\n\nattributes\x18\
    \x08\x20\x03(\x0e2\x19.SC2APIProtocol.AttributeR\nattributes\x12%\n\x0em\
    ovement_speed\x18\t\x20\x01(\x02R\rmovementSpeed\x12\x14\n\x05armor\x18\
    \n\x20\x01(\x02R\x05armor\x120\n\x07weapons\x18\x0b\x20\x03(\x0b2\x16.SC\
    2APIProtocol.WeaponR\x07weapons\"\xca\x01\n\x0bUpgradeData\x12\x1d\n\nup\
    grade_id\x18\x01\x20\x01(\rR\tupgradeId\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x12!\n\x0cmineral_cost\x18\x03\x20\x01(\rR\x0bmineralCo\
    st\x12!\n\x0cvespene_cost\x18\x04\x20\x01(\rR\x0bvespeneCost\x12#\n\rres\
    earch_time\x18\x05\x20\x01(\x02R\x0cresearchTime\x12\x1d\n\nability_id\
    \x18\x06\x20\x01(\rR\tabilityId\"7\n\x08BuffData\x12\x17\n\x07buff_id\
    \x18\x01\x20\x01(\rR\x06buffId\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04\
    name\"z\n\nEffectData\x12\x1b\n\teffect_id\x18\x01\x20\x01(\rR\x08effect\
    Id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12#\n\rfriendly_name\
    \x18\x03\x20\x01(\tR\x0cfriendlyName\x12\x16\n\x06radius\x18\x04\x20\x01\
    (\x02R\x06radius*\x9e\x01\n\tAttribute\x12\t\n\x05Light\x10\x01\x12\x0b\
    \n\x07Armored\x10\x02\x12\x0e\n\nBiological\x10\x03\x12\x0e\n\nMechanica\
    l\x10\x04\x12\x0b\n\x07Robotic\x10\x05\x12\x0b\n\x07Psionic\x10\x06\x12\
    \x0b\n\x07Massive\x10\x07\x12\r\n\tStructure\x10\x08\x12\t\n\x05Hover\
    \x10\t\x12\n\n\x06Heroic\x10\n\x12\x0c\n\x08Summoned\x10\x0b\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(AbilityData::generated_message_descriptor_data());
            messages.push(DamageBonus::generated_message_descriptor_data());
            messages.push(Weapon::generated_message_descriptor_data());
            messages.push(UnitTypeData::generated_message_descriptor_data());
            messages.push(UpgradeData::generated_message_descriptor_data());
            messages.push(BuffData::generated_message_descriptor_data());
            messages.push(EffectData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(Attribute::generated_enum_descriptor_data());
            enums.push(ability_data::Target::generated_enum_descriptor_data());
            enums.push(weapon::TargetType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
